#= Решение задачи 4 в функциональном стиле
    ДАНО: Робот - Робот - в произвольной клетке ограниченного прямоугольного поля

    РЕЗУЛЬТАТ: Робот - в исходном положении, и клетки поля промакированы так:
        нижний ряд - полностью,
        следующий - весь, за исключением одной последней клетки на Востоке,
        следующий - за исключением двух последних клеток на Востоке,
        и т.д.
=#

include("MovementsRobot.jl")
using .MovementsRobot

include("TrajectoriesRobot.jl")
using .TrajectoriesRobot

#=
Расставляет маркеры в форме прямоугольной трапеции (или треугольника - как получится),
при условии, что изначально Робот находится в юго-западном углу
=#
function mark_trap!(num_steps::Integer)
    snake!(Ost, Nord) do fold_direct
        (fold_direct==Ost) && putmarker!()
        putmarkers!(fold_direct, num_steps)
        (fold_direct==West) && (num_steps -= 2)
    end
end

putmarkers!(side, num_steps) = movements!(putmarker!, side, num_steps)

#--------------- Исполняемая часть файла ----------------

#FunctionalRobot.set_situation("имя_файла_с_начальной_обстановкой")
# - этот вызов можно и не делать, тогда Робот сразу будет находиться в юго-западном углу

#=
В общем случае тут должны быть действия по перемещению Робота в юго-западный угол и сохранение 
в соответствующих перенменных число шагов сделанных при этом в двух направлениях
=#

#УТВ: Робот - юго-западном углу

num_steps = get_num_movements!(Ost)
movements!(West)
mark_trap!(num_steps)
#УТВ: маркеры расставлены требуемым образом

# В общем случае тут должны быть действия по возвращению Робота в исходное положение

show!()
