include("TrajectoriesRobot.jl")
using .TrajectoriesRobot

include("../8/horizonside.jl")

"""
    move!(side)::Bool

Делает попытку переместить Робота на 1 шаг в заданном направлении, при необходимости выполняя обход 
изолированной прямоугольной перегородки, и возвращает значение true, если сделать шаг оказалось 
возможным, и false - в противном случае. 
При этом, если в направлении side (или в обратном) встречается перегородка, отличная от прямоугольной, 
то она может быть распознана (алгоритмом) как внешняя граница, т.е. как перегородка, обойти которую невозможно.

Если прямоугольная перегородка, которую должен обойти Робот, не вырождена в отрезок, то величина шага 
получится больше 1 клетки, и будет равна "толщине" этой перегoродки.

Если сделать шаг оказалось не возможно, т.е. если Робот упирается во внешнюю рамку, то он  остается на месте.
"""
function move!(side)::Bool
    num_steps = 0
    while isborder(side) && !isborder(left(side))
        TrajectoriesRobot.move!(left(side))
        num_steps+=1
    end
    #УТВ: Робот стоит за краем перегородки, которую пытался обойти в поперечном направлении, или в углу, если это была внешняя рамка 
    ansver = !isborder(side)
    if ansver==true
        TrajectoriesRobot.move!(side)
    end
    if num_steps==0 # Робот не выполнял попытки обхода (перегородки на его пути не было)
        return ansver
    end
    while isborder(right(side)) 
        if isborder(side)
            ansver = false # перегородка не является прямоугольной
            while isborder(right(side))
                TrajectoriesRobot.move!(inverse(side))
            end
            # Робот возвращен на уровень переднего фронта перегородки
            break
        end
        # перегородка, возможно, является прямоугольной
        TrajectoriesRobot.move!(side)
    end
    #УТВ: Робот прошел сбоку от перегородки за её педелы
    TrajectoriesRobot.movements!(right(side), num_steps)
    #УТВ: Робот возвращен на главную линию своего движения
    return ansver
end


"""
movements!(side)

Перемещает Робота пока возможно сделать шаг в заданном направлении (пока Робот не упрется во внешнюю рамку)
и после каждого шага Робота выполняет action() 
(если Робот уприрается в прямугольную перегородку то величина одного шага может составить несколько клеток)
"""
movements!(side) = 
while move!(side)==true 
end

"""
movements!(action::Function, side)

Перемещает Робота пока возможно сделать шаг в заданном направлении (пока Робот не упрется во внешнюю рамку)
и после каждого шага Робота выполняет action() 
(если Робот уприрается в прямугольную перегородку то величина одного шага может составить несколько клеток)
"""
movements!(action::Function, side) = 
while move!(side)==true
    action()
end

#----

"""
get_num_movements!(side)

Перемещает Робота пока возможно сделать шаг в заданном направлении (пока Робот не упрется во внешнюю рамку), 
и возвращает число сделанных шагов 
(если Робот уприрается в прямугольную перегородку то величина одного шага может составить несколько клеток)
"""
function get_num_movements!(side)
    num_steps=0
    while move!(side)==true
        num_steps+=1
    end
    return num_steps
end

"""
get_num_movements!(side)

Перемещает Робота пока возможно сделать шаг в заданном направлении (пока Робот не упрется во внешнюю рамку)
и после каждого шага Робота выполняет action(), и возвращает число сделанных шагов 
(если Робот уприрается в прямугольную перегородку то величина одного шага может составить несколько клеток)
"""
function get_num_movements!(action::Function, side)
    num_steps=0
    while move!(side)==true
        action()
        num_steps+=1
    end
    return num_steps
end


